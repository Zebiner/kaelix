# rustfmt.toml - MemoryStreamer Code Formatting Configuration
# High-performance streaming system formatting standards
# STABLE FEATURES ONLY - Zero-tolerance compliance
# Targeting readability, maintainability, and diff minimization

# =============================================================================
# GENERAL FORMATTING SETTINGS (STABLE)
# =============================================================================

# Edition compatibility
edition = "2021"

# Line length - Balanced for complex streaming code with multiple generic parameters
# 100 chars allows readable complex types while fitting on most screens
max_width = 100

# Indentation - Standard 4-space indentation for Rust
tab_spaces = 4
hard_tabs = false

# =============================================================================
# IMPORT ORGANIZATION (STABLE OPTIONS ONLY)
# =============================================================================

# Reorder imports consistently (STABLE)
reorder_imports = true
reorder_modules = true

# =============================================================================
# FUNCTION AND TYPE FORMATTING (STABLE)
# =============================================================================

# Function signatures - Use stable option name
fn_params_layout = "Tall"  # Each parameter on new line for complex signatures

# =============================================================================
# CONTROL FLOW FORMATTING (STABLE)
# =============================================================================

# Chain formatting - Important for builder patterns and async chains
chain_width = 80

# Force explicit ABI declarations
force_explicit_abi = true

# =============================================================================
# COLLECTION AND STRUCT FORMATTING (STABLE)
# =============================================================================

# Array formatting
array_width = 80

# Use field initialization shorthand when possible
use_field_init_shorthand = true

# Small arrays configuration
use_small_heuristics = "Max"

# =============================================================================
# ASYNC/AWAIT AND CLOSURE FORMATTING (STABLE)
# =============================================================================

# Match expression formatting
match_arm_leading_pipes = "Preserve"
match_block_trailing_comma = true

# Merge derives for cleaner diffs
merge_derives = true

# Single line formatting - Disable for consistency
single_line_if_else_max_width = 0  # Always multiline if/else

# =============================================================================
# CONFIGURATION NOTES FOR STABLE COMPLIANCE
# =============================================================================

# This rustfmt configuration is designed for the MemoryStreamer project with:
#
# 1. STABLE FEATURES ONLY:
#    - All unstable/nightly features removed for zero-tolerance compliance
#    - Only stable rustfmt options that work across toolchain versions
#    - No configuration warnings or errors
#
# 2. READABILITY FOCUS:
#    - 100 character line limit balances complexity with screen width
#    - Consistent multiline formatting reduces cognitive load
#    - Clear formatting for complex streaming system logic
#
# 3. PERFORMANCE CODE SUPPORT:
#    - Accommodates complex generic types for zero-cost abstractions
#    - Clear formatting for performance-critical function signatures
#    - Support for async/await patterns
#
# 4. COLLABORATION OPTIMIZATION:
#    - Consistent formatting across all team members
#    - Clear, reviewable code structure for complex distributed systems
#    - Minimal diff noise for better code reviews
#
# 5. ZERO-TOLERANCE COMPLIANCE:
#    - No warnings or errors during format operations
#    - Stable across different Rust toolchain versions
#    - Compatible with CI/CD quality gates

# =============================================================================
# USAGE NOTES
# =============================================================================

# To format the entire project:
# cargo fmt
#
# To check formatting without changing files:
# cargo fmt -- --check
#
# To format specific file:
# cargo fmt path/to/file.rs
#
# This configuration prioritizes:
# 1. Zero warnings and errors (certification requirement)
# 2. Consistency across the entire codebase
# 3. Readability for complex streaming system logic
# 4. Support for high-performance Rust patterns